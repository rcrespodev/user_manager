openapi: 3.0.3
info:
  title: User manager
  description: Description
  version: 1.0.0
  contact:
    email: rcrespodev@gmail.com
servers:
  - url: 'http://0.0.0.0:8080'
paths:
  /v1/check-status:
    description: Check the status of Http Application Server.
    get:
      responses:
        200:
          description: The Application server is up and listening http request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/message'
                  data:
                    type: string
                example:
                  {
                    "message": {
                      "object_id": "",
                      "message_id": 0,
                      "message_pkg": "",
                      "variables": [
                        "",
                        "",
                        "",
                        ""
                      ],
                      "text": "",
                      "time": "0001-01-01T00:00:00Z",
                      "client_error_type": 0
                    },
                    "data": "Check-Status = Ok"
                  }
        500:
          description: Internal error in Http Application server.

  /v1/register_user:
    description: Register an new user in Application.
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  $ref: '#/components/schemas/register_user_command'
            example:
              {
                "uuid": "123e4567-e89b-12d3-a456-426614174002",
                "alias": "martin_fowler_2",
                "name": "martin",
                "second_name": "fowler",
                "email": "foo@gmail.com.ar",
                "password": "Linux648$"
              }
      responses:
        200:
          headers:
            Token:
              schema:
                type: string
              description: Jwt signed with private key.
          description: Good request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/message'
              example:
                {
                  "message": {
                    "object_id": "martin_fowler_2",
                    "message_id": 1,
                    "message_pkg": "user",
                    "variables": [
                      "martin_fowler_2",
                      "",
                      "",
                      ""
                    ],
                    "text": "user martin_fowler_2 created successful",
                    "time": "2022-07-18T17:19:29.495575724Z",
                    "client_error_type": 0
                  }
                }
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/message'
              example:
                {
                  "message": {
                    "object_id": "martin_fowler_2",
                    "message_id": 14,
                    "message_pkg": "user",
                    "variables": [
                      "alias",
                      "martin_fowler_2",
                      "",
                      ""
                    ],
                    "text": "user with component: alias and value: martin_fowler_2 already exists",
                    "time": "2022-07-18T17:22:10.019361256Z",
                    "client_error_type": 1
                  }
                }
        500:
          description: Internal error in Application Server.
  /v1/login:
    description: Logout user.
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  $ref: '#/components/schemas/login_user_command'
            example:
              {
                "alias_or_email": "martin_fowler_14",
                "password": "Linux648$"
              }
      responses:
        200:
          headers:
            Token:
              schema:
                type: string
              description: Jwt signed with private key.
          description: Good request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/message'
              example:
                {
                  "message": {
                    "object_id": "martin_fowler_14",
                    "message_id": 0,
                    "message_pkg": "user",
                    "variables": [
                      "martin_fowler_14",
                      "",
                      "",
                      ""
                    ],
                    "text": "user martin_fowler_14 logged successful",
                    "time": "2022-08-04T13:44:03.438652425Z",
                    "client_error_type": 0
                  }
                }
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/message'
              example:
                {
                  "message": {
                    "object_id": "martin_fowler_14",
                    "message_id": 15,
                    "message_pkg": "user",
                    "variables": [
                      "",
                      "",
                      "",
                      ""
                    ],
                    "text": "email, alias or password are not correct. Repeat the access data.",
                    "time": "2022-08-04T13:45:13.698420352Z",
                    "client_error_type": 1
                  }
                }
        500:
          description: Internal error in Application Server.
  /v1/logout:
    description: Login existent user.
    post:
      security:
        - jwtAuth: [ ]
      responses:
        200:
          description: Good request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/message'
              example:
                {
                  "message": {
                    "object_id": "123e4567-e89b-12d3-a456-426614174004",
                    "message_id": 16,
                    "message_pkg": "user",
                    "variables": [
                      "",
                      "",
                      "",
                      ""
                    ],
                    "text": "user logged out successful",
                    "time": "2022-08-04T21:44:04.60888411Z",
                    "client_error_type": 0
                  }
                }
        401:
          description: Token are invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/message'
              example:
                {
                  "message": {
                    "object_id": "123e4567-e89b-12d3-a456-426614174001",
                    "message_id": 0,
                    "message_pkg": "Authorization",
                    "variables": [
                      "",
                      "",
                      "",
                      ""
                    ],
                    "text": "Unauthorized",
                    "time": "2022-08-04T13:45:13.698420352Z",
                    "client_error_type": 2
                  }
                }
        500:
          description: Internal error in Application Server.
  /v1/user:
    description: get user schema.
    get:
      security:
        - jwtAuth: [ ]
      parameters:
        - in: query
          name: uuid
          schema:
            type: string
            format: uuid
          required: false
          description: uuid of target user.
        - in: query
          name: alias
          schema:
            type: string
          required: false
          description: alias of target user.
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: name of target user.
        - in: query
          name: second_name
          schema:
            type: string
          required: false
          description: second name of target user.
        - in: query
          name: email
          schema:
            type: string
            format: email
          required: false
          description: email of target user.
      responses:
        200:
          description: Good request - user found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/message'
                  data:
                    $ref: '#/components/schemas/query_data'
              example:
                {
                  "message": {
                    "object_id": "",
                    "message_id": 0,
                    "message_pkg": "",
                    "variables": [
                      "",
                      "",
                      "",
                      ""
                    ],
                    "text": "",
                    "time": "0001-01-01T00:00:00Z",
                    "client_error_type": 0
                  },
                  "data": {
                    "Uuid": "123e4567-e89b-12d3-a456-426614174004",
                    "Alias": "martin_fowler_14",
                    "Name": "Martin",
                    "SecondName": "Fowler",
                    "Email": "foo14@gmail.com.ar",
                    "HashedPassword": ""
                  }
                }
        400:
          description: not data found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/message'
                  data:
                    $ref: '#/components/schemas/query_data'
              example:
                {
                  "message": {
                    "object_id": "123e4567-e89b-12d3-a456-426614174004",
                    "message_id": 17,
                    "message_pkg": "user",
                    "variables": [
                      "",
                      "",
                      "",
                      ""
                    ],
                    "text": "none of the input values correspond to a registered user",
                    "time": "2022-08-06T14:05:20.667190157Z",
                    "client_error_type": 1
                  },
                  "data": null
                }
        401:
          description: unauthorized. The token uuid must be equal to target user uuid. Otherwise, app return unauthorized. You don´t display data of others users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/message'
                  data:
                    $ref: '#/components/schemas/query_data'
              example:
                {
                  "message": {
                    "object_id": "123e4567-e89b-12d3-a456-426614174004",
                    "message_id": 0,
                    "message_pkg": "Authorization",
                    "variables": [
                      "",
                      "",
                      "",
                      ""
                    ],
                    "text": "Unauthorized",
                    "time": "2022-08-06T14:05:20.667190157Z",
                    "client_error_type": 2
                  },
                  "data": null
                }
components:
  securitySchemes:
    jwtAuth: # arbitrary name for the security scheme
      type: http
      in: header
      scheme: bearer
      bearerFormat: JWT
      name: Token
  schemas:
    message:
      type: object
      properties:
        object_id:
          type: string
        message_id:
          type: integer
          format: uint16
        message_pkg:
          type: string
        variables:
          type: array
          items:
            type: string
        text:
          type: string
        time:
          type: string
          format: ISO
        client_error_type:
          type: integer
          format: unit8
    query_data:
      type: object
      additionalProperties:
        type: string
    register_user_command:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        alias:
          type: string
        name:
          type: string
        second_name:
          type: string
        email:
          type: string
        password:
          type: string
    login_user_command:
      type: object
      properties:
        email_or_alias:
          type: string
        password:
          type: string